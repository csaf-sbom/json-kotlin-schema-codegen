/*
 * TestApTrueExtraNested.kt
 *
 * This code was generated by json-kotlin-schema-codegen - JSON Schema Code Generator
 * See https://github.com/pwall567/json-kotlin-schema-codegen
 *
 * It is not advisable to modify generated code as any modifications will be lost
 * when the generation process is re-run.
 */
package net.pwall.json.schema.codegen.test.kotlin

/**
 * Test use of additionalProperties true with extra nested object.
 */
class TestApTrueExtraNested(
    private val cg_map: Map<String, Any?>
) : Map<String, Any?> by cg_map {

    init {
        require(cg_map.containsKey("extra")) { "required property missing - extra" }
        require(cg_map["extra"] is Extra) { "extra is not the correct type, expecting Extra" }
        require(cg_map.containsKey("codes")) { "required property missing - codes" }
        require(cg_map["codes"] is Codes) { "codes is not the correct type, expecting Codes" }
        if (cg_map.containsKey("empty"))
            require(cg_map["empty"] is Empty?) { "empty is not the correct type, expecting Empty?" }
    }

    /** Extra data. */
    val extra: Extra by cg_map

    /** Extra enum. */
    val codes: Codes by cg_map

    /** Extra empty object. */
    val empty: Empty?
        get() = cg_map["empty"] as Empty?

    override fun toString(): String = "TestApTrueExtraNested(${cg_map.entries.joinToString { "${it.key}=${it.value}" }})"

    override fun equals(other: Any?): Boolean = this === other || other is TestApTrueExtraNested && cg_map == other.cg_map

    override fun hashCode(): Int = cg_map.hashCode()

    /**
     * Extra data.
     */
    data class Extra(
        val field1: String,
        val field2: Boolean
    )

    /**
     * Extra enum.
     */
    enum class Codes {
        ALPHA,
        BETA
    }

    /**
     * Extra empty object.
     */
    class Empty(
        private val cg_map: Map<String, Any?>
    ) : Map<String, Any?> by cg_map {

        override fun toString(): String = "Empty(${cg_map.entries.joinToString { "${it.key}=${it.value}" }})"

        override fun equals(other: Any?): Boolean = this === other || other is Empty && cg_map == other.cg_map

        override fun hashCode(): Int = cg_map.hashCode()

    }

}
