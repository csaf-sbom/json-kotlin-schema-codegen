/*
 * TestExtensibleEnum.kt
 *
 * This code was generated by json-kotlin-schema-codegen - JSON Schema Code Generator
 * See https://github.com/pwall567/json-kotlin-schema-codegen
 *
 * It is not advisable to modify generated code as any modifications will be lost
 * when the generation process is re-run.
 */
package net.pwall.json.schema.codegen.test.kotlin

/**
 * Test extensible enum.
 */
@JvmInline
value class TestExtensibleEnum(val name: String) : CharSequence {

    override fun toString(): String = name

    override val length: Int
        get() = name.length

    override fun get(index: Int): Char = name[index]

    override fun subSequence(startIndex: Int, endIndex: Int): TestExtensibleEnum =
        valueOf(name.subSequence(startIndex, endIndex).toString())

    companion object {

        val ALPHA = TestExtensibleEnum("ALPHA")
        val BETA = TestExtensibleEnum("BETA")

        fun valueOf(name: String): TestExtensibleEnum = when (name) {
            "ALPHA" -> ALPHA
            "BETA" -> BETA
            else -> TestExtensibleEnum(name)
        }

        val entries: List<TestExtensibleEnum> = listOf(
            ALPHA,
            BETA
        )

    }

}
