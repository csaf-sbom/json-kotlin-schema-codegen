/*
 * TestBaseWithValidation.java
 *
 * This code was generated by json-kotlin-schema-codegen - JSON Schema Code Generator
 * See https://github.com/pwall567/json-kotlin-schema-codegen
 *
 * It is not advisable to modify generated code as any modifications will be lost
 * when the generation process is re-run.
 */
package net.pwall.json.schema.codegen.test.java;

public class TestBaseWithValidation {

    private final Type type;
    private final int quantity;
    private final String name;

    public TestBaseWithValidation(
            Type type,
            int quantity,
            String name
    ) {
        if (type == null)
            throw new IllegalArgumentException("Must not be null - type");
        this.type = type;
        if (quantity < -1000 || quantity > 1000)
            throw new IllegalArgumentException("quantity not in range -1000..1000 - " + quantity);
        this.quantity = quantity;
        if (name == null)
            throw new IllegalArgumentException("Must not be null - name");
        if (name.length() < 1)
            throw new IllegalArgumentException("name length < minimum 1 - " + name.length());
        this.name = name;
    }

    public Type getType() {
        return type;
    }

    public int getQuantity() {
        return quantity;
    }

    public String getName() {
        return name;
    }

    @Override
    public boolean equals(Object cg_other) {
        if (this == cg_other)
            return true;
        if (!(cg_other instanceof TestBaseWithValidation))
            return false;
        TestBaseWithValidation cg_typedOther = (TestBaseWithValidation)cg_other;
        if (type != cg_typedOther.type)
            return false;
        if (quantity != cg_typedOther.quantity)
            return false;
        return name.equals(cg_typedOther.name);
    }

    @Override
    public int hashCode() {
        int hash = type.hashCode();
        hash ^= quantity;
        return hash ^ name.hashCode();
    }

    public static class Builder {

        private Type type;
        private int quantity;
        private String name;

        public Builder withType(Type type) {
            this.type = type;
            return this;
        }

        public Builder withQuantity(int quantity) {
            this.quantity = quantity;
            return this;
        }

        public Builder withName(String name) {
            this.name = name;
            return this;
        }

        public TestBaseWithValidation build() {
            return new TestBaseWithValidation(
                    type,
                    quantity,
                    name
            );
        }

    }

    public enum Type {
        FIRST,
        SECOND,
        THIRD
    }

}
